Question link:- https://leetcode.com/problems/minimum-falling-path-sum/description/

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int ans = INT_MAX;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int col=0; col<n; col++) dp[n-1][col] = matrix[n-1][col];
        for(int row=n-2; row>=0; row--){
            for(int col=0; col<n; col++){
                int left = INT_MAX, down = INT_MAX, right = INT_MAX;
                if(col-1 >= 0) left = dp[row+1][col-1];
                down = dp[row+1][col];
                if(col+1 < matrix.size()) right = dp[row+1][col+1];
                dp[row][col] = matrix[row][col] + min(left, min(down, right));
            }
        }
        for(int col=0; col<n; col++) ans = min(ans, dp[0][col]);
        return ans;
    }
};
